# penthesilea.conf

files_in = '{filein}'
file_out = '{fileout}'

run_number = -6400

print_mod = 100
event_range =  all


# Penthesilea produces a hit collection starting from PMAPS. Since it
# also applies a selection to PMAPS it takes the parameters of
# s12_selector.

drift_v = 1. * mm / mus # Expected drift velocity

s1_nmin     =    1
s1_nmax     =    1
s1_emin     =    0 * pes # Min S1 energy integral
s1_emax     = 1e+6 * pes # Max S1 energy integral
s1_wmin     =  1 * ns # min width for S1
s1_wmax     =  1.e6 * ns # Max width
s1_hmin     =    0 * pes # Min S1 height
s1_hmax     = 1e+6 * pes # Max S1 height
s1_ethr     =  0.5 * pes # Energy threshold for S1

s2_nmin     =     1
s2_nmax     =     100       # Max number of S2 signals
s2_emin     =     0 * pes # Min S2 energy integral
s2_emax     =  1e+7 * pes # Max S2 energy integral in pes
s2_wmin     =     3 * mus # Min width
s2_wmax     =    10 * ms  # Max width
s2_hmin     =     0 * pes # Min S2 height
s2_hmax     =  1e+6 * pes # Max S2 height
s2_nsipmmin =     1       # Min number of SiPMs touched
s2_nsipmmax =   2000       # Max number of SiPMs touched
s2_ethr     =     0. * pes # Energy threshold for S2

# compression library
compression = 'ZLIB4'

rebin = 2  # if set to 1 no rebin is set to n rebin n times the wfm

slice_reco_params = dict(
Qthr           =   30. * pes,  # charge threshold, ignore all SiPMs with less than Qthr pes
Qlm            =   30 * pes,  # every Cluster must contain at least one SiPM with charge >= Qlm

# lm_radius = radius, find new_local_maximum by taking the barycenter of SiPMs within
#             lm_radius of the max sipm. new_local_maximum is new in the sense that the
#             prev loc max was the position of hottest_sipm. (Then allow all SiPMs with
#             new_local_maximum of new_local_maximum to contribute to the pos and q of the
#             new cluster).
# ***In general lm_radius should typically be set to 0, or some value slightly
# larger than pitch or pitch*sqrt(2).***
# ***If lm_radius is set to a negative number, the algorithm will simply return
# the overall barycenter all the SiPms above threshold.***
lm_radius      =   0 * mm,  # by default, use 3x3 corona

# new_lm_radius = radius, find a new cluster by calling barycenter() on pos/qs of SiPMs within
#                 new_lm_radius of new_local_maximum
new_lm_radius  =   0 * mm,  # by default, use 3 x3 corona
msipm          =   1       # minimum number of SiP
)


global_reco_params = dict(
    Qthr           =   0 * pes,
    lm_radius      =   -1)



